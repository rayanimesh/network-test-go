/*
 * DNS Service
 *
 * Sevice for managing DNS with route53
 *
 * API version: 0.0.1
 * Contact: iitr.animesh@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package route53dns

import (
	"context"
	"errors"
	"log"
	"net/http"
	"strings"

	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/route53"
	"github.com/aws/aws-sdk-go-v2/service/route53/types"
)

// DefaultAPIService is a service that implements the logic for the DefaultAPIServicer
// This service should implement the business logic for every endpoint for the DefaultAPI API.
// Include any external packages or services that will be required by this service.
type DefaultAPIService struct {
	Route53Client *route53.Client
}

// NewDefaultAPIService creates a default api service
func NewDefaultAPIService() DefaultAPIServicer {
	ctx := context.TODO()

	cfg, err := config.LoadDefaultConfig(ctx,
		config.WithSharedConfigProfile("default"),
	)
	if err != nil {
		log.Fatalf("unable to load SDK config, %v", err)
	}
	r53Service := route53.NewFromConfig(cfg)
	return &DefaultAPIService{Route53Client: r53Service}
}

// CreateRoute53HostedZoneRecord - Create records for a domain (hosted zone)
func (s *DefaultAPIService) CreateRoute53HostedZoneRecord(ctx context.Context, domain string, dnsRecord DnsRecord) (ImplResponse, error) {
	ttl64 := int64(dnsRecord.Ttl)
	// TODO - clean and test dnsRecord.value for combination with RecordType
	joinedValueString := strings.Join(dnsRecord.Value, ",")
	changeList := []types.Change{}
	change := types.Change{
		Action: types.ChangeActionCreate,
		ResourceRecordSet: &types.ResourceRecordSet{
			Name: &dnsRecord.Name,
			Type: ConvertDnsRecordTypeToRRType(dnsRecord.Type),
			ResourceRecords: []types.ResourceRecord{
				{
					Value: &(joinedValueString),
				},
			},
			TTL: &(ttl64),
		},
	}
	changeList = append(changeList, change)
	changeBatchInput := &types.ChangeBatch{Changes: changeList, Comment: nil}
	hostedZoneId, err := s.GetHostedZoneIdByHostedZoneName(ctx, domain)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	changeRecordSetInput := &route53.ChangeResourceRecordSetsInput{HostedZoneId: &hostedZoneId, ChangeBatch: changeBatchInput}
	changeRecordSetO, err := s.Route53Client.ChangeResourceRecordSets(ctx, changeRecordSetInput)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	if changeRecordSetO.ChangeInfo.Status == "PENDING" || changeRecordSetO.ChangeInfo.Status == "INSYNC" {
		return Response(201, changeRecordSetO.ChangeInfo.Status), nil
	}
	return Response(200, changeRecordSetO.ChangeInfo.Status), nil
}

// ListRoute53HostedZoneRecords - List records by domain (hosted zone)
func (s *DefaultAPIService) ListRoute53HostedZoneRecords(ctx context.Context, domain string) (ImplResponse, error) {
	hostedZoneId, err := s.GetHostedZoneIdByHostedZoneName(ctx, domain)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}
	resourceRecordSetInput := &route53.ListResourceRecordSetsInput{HostedZoneId: &hostedZoneId}
	recordSets, err := s.Route53Client.ListResourceRecordSets(context.TODO(), resourceRecordSetInput)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	var hostedDNSRecords []DnsRecord

	for _, recordSet := range recordSets.ResourceRecordSets {
		var valuesList []string
		for _, item := range recordSet.ResourceRecords {
			valuesList = append(valuesList, *item.Value)
		}

		d := DnsRecord{
			Name:  *recordSet.Name,
			Type:  DnsRecordType(string(recordSet.Type)),
			Value: valuesList,
			Ttl:   int32(*recordSet.TTL),
		}
		hostedDNSRecords = append(hostedDNSRecords, d)
	}
	return Response(200, hostedDNSRecords), nil
}

// ListRoute53HostedZones - List all route53 domains (hosted zones)
func (s *DefaultAPIService) ListRoute53HostedZones(ctx context.Context) (ImplResponse, error) {
	hostedZoneInput := &route53.ListHostedZonesInput{}
	hostedZones, err := s.Route53Client.ListHostedZones(context.TODO(), hostedZoneInput)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}
	var hostedZoneNames []string
	for _, hostedZone := range hostedZones.HostedZones {
		hostedZoneNames = append(hostedZoneNames, *hostedZone.Name)
	}
	// TODO - update ListRoute53HostedZones with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	return Response(200, hostedZoneNames), nil

}

// Route53CreatednsfromlbtagsPut - Create dns record from AWS loadbalancer tags
func (s *DefaultAPIService) Route53CreatednsfromlbtagsPut(ctx context.Context, loadBalancerInput LoadBalancerInput) (ImplResponse, error) {
	// TODO - update Route53CreatednsfromlbtagsPut with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(201, DnsRecord{}) or use other options such as http.Ok ...
	// return Response(201, DnsRecord{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(409, {}) or use other options such as http.Ok ...
	// return Response(409, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("Route53CreatednsfromlbtagsPut method not implemented")
}

// Route53DomainsDomainRecordsNameRecordTypeDelete - Delete DNS record
func (s *DefaultAPIService) Route53DomainsDomainRecordsNameRecordTypeDelete(ctx context.Context, domain string, name string, recordType DnsRecordType) (ImplResponse, error) {
	// TODO - update Route53DomainsDomainRecordsNameRecordTypeDelete with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, {}) or use other options such as http.Ok ...
	// return Response(204, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("Route53DomainsDomainRecordsNameRecordTypeDelete method not implemented")
}

// Route53DomainsDomainRecordsNameRecordTypeGet - Get a DNS record with type
func (s *DefaultAPIService) Route53DomainsDomainRecordsNameRecordTypeGet(ctx context.Context, domain string, name string, recordType DnsRecordType) (ImplResponse, error) {
	hostedZoneId, err := s.GetHostedZoneIdByHostedZoneName(ctx, domain)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	resourceRecordSetInput := &route53.ListResourceRecordSetsInput{HostedZoneId: &hostedZoneId, StartRecordName: &name, StartRecordType: ConvertDnsRecordTypeToRRType(recordType)}

	recordSets, err := s.Route53Client.ListResourceRecordSets(context.TODO(), resourceRecordSetInput)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	if len(recordSets.ResourceRecordSets) == 0 {
		return Response(404, "Record "+name+" not found in hosted zone of"+domain), nil
	}

	var hostedDNSRecords []DnsRecord

	for _, recordSet := range recordSets.ResourceRecordSets {

		if *recordSet.Name != name {
			continue
		}
		var valuesList []string
		for _, item := range recordSet.ResourceRecords {
			valuesList = append(valuesList, *item.Value)
		}

		d := DnsRecord{
			Name:  *recordSet.Name,
			Type:  DnsRecordType(string(recordSet.Type)),
			Value: valuesList,
			Ttl:   int32(*recordSet.TTL),
		}
		hostedDNSRecords = append(hostedDNSRecords, d)
	}
	if len(hostedDNSRecords) == 0 {
		return Response(404, "Record "+name+" not found"), nil
	}
	return Response(200, hostedDNSRecords), nil
}

// helper function
func (s *DefaultAPIService) GetHostedZoneIdByHostedZoneName(ctx context.Context, domain string) (string, error) {
	domain = strings.TrimRight(domain, ".")
	hostedZoneInput := &route53.ListHostedZonesByNameInput{DNSName: &domain}
	//https://pkg.go.dev/github.com/aws/aws-sdk-go-v2/service/route53#ListHostedZonesByNameInput
	// Provide DNS name if you want it to be first item. Hmm.
	// Get 0th element from array and check it against name as well to confirm
	// Also check for no element
	hostedZones, err := s.Route53Client.ListHostedZonesByName(context.TODO(), hostedZoneInput)
	if err != nil {
		return "", err
	}
	if len(hostedZones.HostedZones) == 0 {
		return "", errors.New("Hosted Zone " + domain + " not found (count)")
	}
	if strings.TrimRight((*hostedZones.HostedZones[0].Name), ".") == domain {
		return (*(hostedZones.HostedZones[0]).Id), nil
	} else {
		return "", errors.New("Hosted Zone " + domain + " not found")
	}
}

// helper to convert DnsRecordType to RRType as both are constants
func ConvertDnsRecordTypeToRRType(dnsType DnsRecordType) types.RRType {
	switch dnsType {
	case SOA:
		return types.RRTypeSoa
	case A:
		return types.RRTypeA
	case TXT:
		return types.RRTypeTxt
	case NS:
		return types.RRTypeNs
	case CNAME:
		return types.RRTypeCname
	case MX:
		return types.RRTypeMx
	case NAPTR:
		return types.RRTypeNaptr
	case PTR:
		return types.RRTypePtr
	case SRV:
		return types.RRTypeSrv
	case SPF:
		return types.RRTypeSpf
	case AAAA:
		return types.RRTypeAaaa
	case CAA:
		return types.RRTypeCaa
	case DS:
		return types.RRTypeDs
	default:
		return ""
	}
}

/*
 * DNS Service
 *
 * Sevice for managing DNS with route53
 *
 * API version: 0.0.1
 * Contact: iitr.animesh@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package route53dns

import (
	"context"
	"errors"
	"log"
	"net/http"

	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/route53"
)

// DefaultAPIService is a service that implements the logic for the DefaultAPIServicer
// This service should implement the business logic for every endpoint for the DefaultAPI API.
// Include any external packages or services that will be required by this service.
type DefaultAPIService struct {
	Route53Client *route53.Client
}

// NewDefaultAPIService creates a default api service
func NewDefaultAPIService() DefaultAPIServicer {
	ctx := context.TODO()

	cfg, err := config.LoadDefaultConfig(ctx,
		config.WithSharedConfigProfile("default"),
	)
	if err != nil {
		log.Fatalf("unable to load SDK config, %v", err)
	}
	r53Service := route53.NewFromConfig(cfg)
	return &DefaultAPIService{Route53Client: r53Service}
}

// CreateRoute53HostedZoneRecord - Create records for a domain (hosted zone)
func (s *DefaultAPIService) CreateRoute53HostedZoneRecord(ctx context.Context, domain string, dnsRecord DnsRecord) (ImplResponse, error) {
	// TODO - update CreateRoute53HostedZoneRecord with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(201, DnsRecord{}) or use other options such as http.Ok ...
	// return Response(201, DnsRecord{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(409, {}) or use other options such as http.Ok ...
	// return Response(409, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("CreateRoute53HostedZoneRecord method not implemented")
}

// ListRoute53HostedZoneRecords - List records by domain (hosted zone)
func (s *DefaultAPIService) ListRoute53HostedZoneRecords(ctx context.Context, domain string) (ImplResponse, error) {
	// TODO - update ListRoute53HostedZoneRecords with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, DnsRecord{}) or use other options such as http.Ok ...
	// return Response(200, DnsRecord{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ListRoute53HostedZoneRecords method not implemented")
}

// ListRoute53HostedZones - List all route53 domains (hosted zones)
func (s *DefaultAPIService) ListRoute53HostedZones(ctx context.Context) (ImplResponse, error) {
	hostedZoneInput := &route53.ListHostedZonesInput{}
	hostedZones, err := s.Route53Client.ListHostedZones(context.TODO(), hostedZoneInput)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}
	var hostedZoneNames []string
	for _, hostedZone := range hostedZones.HostedZones {
		hostedZoneNames = append(hostedZoneNames, *hostedZone.Name)
	}
	// TODO - update ListRoute53HostedZones with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	return Response(200, hostedZoneNames), nil

}

// Route53CreatednsfromlbtagsPut - Create dns record from AWS loadbalancer tags
func (s *DefaultAPIService) Route53CreatednsfromlbtagsPut(ctx context.Context, loadBalancerInput LoadBalancerInput) (ImplResponse, error) {
	// TODO - update Route53CreatednsfromlbtagsPut with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(201, DnsRecord{}) or use other options such as http.Ok ...
	// return Response(201, DnsRecord{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(409, {}) or use other options such as http.Ok ...
	// return Response(409, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("Route53CreatednsfromlbtagsPut method not implemented")
}

// Route53DomainsDomainRecordsNameRecordTypeDelete - Delete DNS record
func (s *DefaultAPIService) Route53DomainsDomainRecordsNameRecordTypeDelete(ctx context.Context, domain string, name string, recordType DnsRecordType) (ImplResponse, error) {
	// TODO - update Route53DomainsDomainRecordsNameRecordTypeDelete with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, {}) or use other options such as http.Ok ...
	// return Response(204, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("Route53DomainsDomainRecordsNameRecordTypeDelete method not implemented")
}

// Route53DomainsDomainRecordsNameRecordTypeGet - Get a DNS record with type
func (s *DefaultAPIService) Route53DomainsDomainRecordsNameRecordTypeGet(ctx context.Context, domain string, name string, recordType DnsRecordType) (ImplResponse, error) {
	// TODO - update Route53DomainsDomainRecordsNameRecordTypeGet with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, DnsRecord{}) or use other options such as http.Ok ...
	// return Response(200, DnsRecord{}), nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("Route53DomainsDomainRecordsNameRecordTypeGet method not implemented")
}

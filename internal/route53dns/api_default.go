/*
 * DNS Service
 *
 * Sevice for managing DNS with route53
 *
 * API version: 0.0.1
 * Contact: iitr.animesh@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package route53dns

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"CreateRoute53HostedZoneRecord": Route{
			strings.ToUpper("Put"),
			"/api/route53/domains/{domain}/records",
			c.CreateRoute53HostedZoneRecord,
		},
		"ListRoute53HostedZoneRecords": Route{
			strings.ToUpper("Get"),
			"/api/route53/domains/{domain}/records",
			c.ListRoute53HostedZoneRecords,
		},
		"ListRoute53HostedZones": Route{
			strings.ToUpper("Get"),
			"/api/route53/domains",
			c.ListRoute53HostedZones,
		},
		"Route53CreatednsfromlbtagsPut": Route{
			strings.ToUpper("Put"),
			"/api/route53/creatednsfromlbtags",
			c.Route53CreatednsfromlbtagsPut,
		},
		"Route53DomainsDomainRecordsNameRecordTypeDelete": Route{
			strings.ToUpper("Delete"),
			"/api/route53/domains/{domain}/records/{name}/{recordType}",
			c.Route53DomainsDomainRecordsNameRecordTypeDelete,
		},
		"Route53DomainsDomainRecordsNameRecordTypeGet": Route{
			strings.ToUpper("Get"),
			"/api/route53/domains/{domain}/records/{name}/{recordType}",
			c.Route53DomainsDomainRecordsNameRecordTypeGet,
		},
	}
}

// CreateRoute53HostedZoneRecord - Create records for a domain (hosted zone)
func (c *DefaultAPIController) CreateRoute53HostedZoneRecord(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	domainParam := params["domain"]
	if domainParam == "" {
		c.errorHandler(w, r, &RequiredError{"domain"}, nil)
		return
	}
	dnsRecordParam := DnsRecord{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dnsRecordParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDnsRecordRequired(dnsRecordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDnsRecordConstraints(dnsRecordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateRoute53HostedZoneRecord(r.Context(), domainParam, dnsRecordParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListRoute53HostedZoneRecords - List records by domain (hosted zone)
func (c *DefaultAPIController) ListRoute53HostedZoneRecords(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	domainParam := params["domain"]
	if domainParam == "" {
		c.errorHandler(w, r, &RequiredError{"domain"}, nil)
		return
	}
	result, err := c.service.ListRoute53HostedZoneRecords(r.Context(), domainParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListRoute53HostedZones - List all route53 domains (hosted zones)
func (c *DefaultAPIController) ListRoute53HostedZones(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListRoute53HostedZones(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Route53CreatednsfromlbtagsPut - Create dns record from AWS loadbalancer tags
func (c *DefaultAPIController) Route53CreatednsfromlbtagsPut(w http.ResponseWriter, r *http.Request) {
	loadBalancerInputParam := LoadBalancerInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&loadBalancerInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoadBalancerInputRequired(loadBalancerInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLoadBalancerInputConstraints(loadBalancerInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Route53CreatednsfromlbtagsPut(r.Context(), loadBalancerInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Route53DomainsDomainRecordsNameRecordTypeDelete - Delete DNS record
func (c *DefaultAPIController) Route53DomainsDomainRecordsNameRecordTypeDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	domainParam := params["domain"]
	if domainParam == "" {
		c.errorHandler(w, r, &RequiredError{"domain"}, nil)
		return
	}
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	recordTypeParam, err := NewDnsRecordTypeFromValue(params["recordType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.Route53DomainsDomainRecordsNameRecordTypeDelete(r.Context(), domainParam, nameParam, recordTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Route53DomainsDomainRecordsNameRecordTypeGet - Get a DNS record with type
func (c *DefaultAPIController) Route53DomainsDomainRecordsNameRecordTypeGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	domainParam := params["domain"]
	if domainParam == "" {
		c.errorHandler(w, r, &RequiredError{"domain"}, nil)
		return
	}
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	recordTypeParam, err := NewDnsRecordTypeFromValue(params["recordType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.Route53DomainsDomainRecordsNameRecordTypeGet(r.Context(), domainParam, nameParam, recordTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
